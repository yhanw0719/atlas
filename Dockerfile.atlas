# Dockerfile Layer 2 for atlas
# Add to Layer 1 for quick code update
# docker build -t tin6150/atlas102 -f Dockerfile.atlas .  | tee LOG.Dockerfile.atlas102r411ex4
# docker build -t lbnl-science-it/atlas -f Dockerfile.atlas .  | tee Dockerfile.layer2.log 
# (see DevNotes.rst for alternate details)

# branch specific settings:
# base: Dockerfile -> Dockerfile.base
# main: Dockerfile -> Dockerfile.atlas # ie layer 2 that build on top of Dockerfile.base 
# Can probably alter the .github/workflow/docker-publish.yml, but this will do for now :D

# r-base:3.6.3 was last of 3.x, ca 2019
# r-base:4.1.1  # ca 2021.10, but gchr built image compatibility problem with aws/ubuntu: R won't run
#FROM r-base:3.6.3
#FROM r-base:4.0.3
#FROM r-base:4.1.1  

# ghcr.io/lbnl-science-it/atlas are automated build using an ubuntu container, which works for CentOS, but in aws/ubuntu R won't start
# tin6150/atlas are manual build on centos machine and tag/push to dockerhub.  R works in aws/ubuntu.
# df4724d Dockerfile.base w/ Deb11 + apt update +  R_HOME etc ENV ... got R 4.0.4, apollo, tidyverse, and R loads in Mint(U16.04), so testing atlas 1.0.2dcf  2022.0406
# d785134 Dockerfile.base direct R 412 + apt update + R_HOME etc ENV #0206.  Rscript did not work, add PATH ENV didn't help, so rebuild after a new atlas:base is back to ubuntu 21.04.  here R works, but not Rscript, cuz test -x /usr/lib/R returns 1 :-\
# 3e1332b Debian bullseye (11) no PATH R 4.0.4
FROM ghcr.io/lbnl-science-it/atlas:vBase1.0.4

# FROM tin6150/atlas:base   # 2022.0204 is now a "locked r-base:4.1.1 with no apt update, R work on aws/ubuntu 16.04, but unsure about tidyverse (yes on apollo)"
#FROM tin6150/atlas:base
MAINTAINER Tin (at) LBL.gov

ARG DEBIAN_FRONTEND=noninteractive
#ARG TERM=vt100
ARG TERM=dumb
ARG TZ=PST8PDT 
#https://no-color.org/
ARG NO_COLOR=1


## branch l2 (ie layer2, for code dev)
## depends on base branch, rebuild with r-base

RUN echo  ''  ;\
    touch _TOP_DIR_OF_CONTAINER_  ;\
    echo "Layer 2 atlas code addition" | tee -a _TOP_DIR_OF_CONTAINER_  ;\
    export TERM=dumb      ;\
    export NO_COLOR=TRUE  ;\
    cd /    ;\
    echo ""  

RUN echo ''  ;\
    echo '==================================================================' ;\
    echo 'capturing container build info                                    ' ;\
    test -d /opt/gitrepo  || mkdir -p /opt/gitrepo        ;\
    test -d /opt/gitrepo/container_layer2  || mkdir -p /opt/gitrepo/container_layer2          ;\
    git branch | tee /opt/gitrepo/container_layer2/git.branch.out.txt                          ;\
    git log --oneline --graph --decorate | tee /opt/gitrepo/container_layer2/git.lol.out.txt  ;\
    # cd /opt/gitrepo/container_layer2           ;\
    cd /     ;\
    echo ""  



RUN echo ''  ;\
    echo '==================================================================' ;\
    echo '' ;\
    export TERM=dumb  ;\
    ## Rscript --quiet --no-readline --slave -e '{ library(pacman); p_load( optparse, argparse, stats ) }' ;\
    Rscript --quiet --no-readline --slave -e 'library()'   | sort | tee R_library_list.out.l2.txt  ;\
    ls /usr/local/lib/R/site-library | sort | tee R-site-lib-ls.out.l2.txt   ;\
    echo "Done installing packages cran packages - layer 2" | tee -a _TOP_DIR_OF_CONTAINER_     ;\
    date | tee -a      _TOP_DIR_OF_CONTAINER_   ;\
    cd /     ;\
    # tmp for test with Ling's tmp code
    mkdir -p /global/data/transportation/ATLAS/static/urbansim ;\
    mkdir -p /global/data/transportation/ATLAS/static/urbansim/model_application ;\
    pwd  ;\
    echo ""


COPY Dockerfile* /opt/gitrepo/container_layer2/
COPY . /
COPY . /opt/gitrepo/atlas/


RUN  cd / \
  && touch _TOP_DIR_OF_CONTAINER_  \
  && echo  "--------" >> _TOP_DIR_OF_CONTAINER_   \
  && TZ=PST8PDT date  >> _TOP_DIR_OF_CONTAINER_   \
  && echo  "Atlas v1.0.4 -- Dockerfile.atlas 2022.0207.2146 d11   r404"     >> _TOP_DIR_OF_CONTAINER_   \
  && echo  "Grand Finale Dockerfile.atlas"

ENV DBG_ATLAS_VER "Atlas v1.0.4 -- Docker.atlas 2022.0207.2146 d11 r404"
ENV DBG_DOCKERFILE Dockerfile.atlas
ENV TZ America/Los_Angeles 

#xx ENV PATH=/usr/lib/R/bin/exec:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
## tmp overwrite PATH to test if this fix Rscript to work, did not work, maybe made it worse?  Ubuntu 21.04 test -x /usr/lib/R return 1 which is why R fails to run

#ENTRYPOINT ["cat", "/_TOP_DIR_OF_CONTAINER_"]
#ENTRYPOINT [ "/bin/bash" ]
#ENTRYPOINT [ "/usr/bin/rstudio" ]
#ENTRYPOINT [ "Rscript", "/opt/gitrepo/atlas/Model_application_hima.R" ]
ENTRYPOINT [ "/usr/bin/Rscript", "/main.R" ]
#ENTRYPOINT [ " /usr/lib/R/bin/exec/R", "/main.R" ]
##ENTRYPOINT [ "R" ]
# if no defined ENTRYPOINT, default to bash inside the container
# careful not to cover /home/username (for this container)

# vim: shiftwidth=4 tabstop=4 formatoptions-=cro nolist nu syntax=on
